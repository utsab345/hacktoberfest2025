#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        vector<int> vis(V, 0);   // safer than raw array
        vector<int> bfs; 
        queue<int> q;

        vis[0] = 1; 
        q.push(0); 

        while(!q.empty()) {
            int node = q.front(); 
            q.pop(); 
            bfs.push_back(node); 

            for(int neigh : adj[node]) {
                if(!vis[neigh]) {
                    vis[neigh] = 1; 
                    q.push(neigh); 
                }
            }
        }
        return bfs; 
    }
};

void addEdge(vector<int> adj[], int u, int v) {
    adj[u].push_back(v);
    adj[v].push_back(u); // remove if graph is directed
}

int main() {
    int V = 6;
    vector<int> adj[V];

    addEdge(adj, 0, 1);
    addEdge(adj, 1, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 0, 4);

    Solution obj;
    vector<int> ans = obj.bfsOfGraph(V, adj);

    for (int x : ans) cout << x << " ";
    return 0;
}
